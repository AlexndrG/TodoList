{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","TextField","value","onChange","e","currentTarget","onKeyPress","charCode","className","label","variant","helperText","size","IconButton","onClick","color","AddBox","fontSize","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Todolist","changeTodolistTitle","id","removeTodolist","style","Delete","addTask","listStyle","padding","tasks","map","t","key","Checkbox","newIsDoneValue","checked","changeTaskStatus","isDone","newValue","changeTaskTitle","removeTask","Button","filter","changeFilter","margin","App","todolistId","todolistTasks","setTasks","task","v1","todolist","todolists","find","tl","setTodolists","changeStatus","newTitle","todolistId1","todolistId2","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","marginBottom","newTodolistId","spacing","allTodolistTasks","tasksForTodolist","item","Paper","elevation","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.41ee31f1.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {AddBox} from '@material-ui/icons';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        {/*<input value={title}*/}\r\n        {/*       onChange={onChangeHandler}*/}\r\n        {/*       onKeyPress={onKeyPressHandler}*/}\r\n        {/*       className={error ? \"error\" : \"\"}*/}\r\n        {/*/>*/}\r\n        <TextField\r\n            value={title}\r\n            onChange={onChangeHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n            className={error ? 'error' : ''}\r\n            label={'Title'}\r\n            variant={'outlined'}\r\n            error={!!error}\r\n            helperText={error}\r\n            size={'small'}\r\n        />\r\n\r\n        {/*<button onClick={addItem}>+</button>*/}\r\n        <IconButton\r\n            onClick={addItem}\r\n            color={'primary'}\r\n            size={'small'}>\r\n            <AddBox fontSize={'large'}/>\r\n        </IconButton>\r\n\r\n        {/*{error && <div className=\"error-message\">{error}</div>}*/}\r\n    </div>\r\n}\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField\r\n            value={title}\r\n            onChange={changeTitle}\r\n            autoFocus\r\n            onBlur={activateViewMode}\r\n        />\r\n        // <input\r\n        //     value={title}\r\n        //     onChange={changeTitle}\r\n        //     autoFocus\r\n        //     onBlur={activateViewMode}\r\n        // />\r\n\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Button, IconButton, Checkbox} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id);\r\n    }\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id);\r\n    }\r\n    const changeTodolistTitle = (title: string) => {\r\n        props.changeTodolistTitle(props.id, title);\r\n    }\r\n\r\n    const onAllClickHandler = () => props.changeFilter('all', props.id);\r\n    const onActiveClickHandler = () => props.changeFilter('active', props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter('completed', props.id);\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            {/*<button onClick={removeTodolist}>x</button>*/}\r\n            <IconButton\r\n                onClick={removeTodolist}\r\n                // color={'primary'}\r\n                style={{color: 'black'}}\r\n                size={'small'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <ul style={{listStyle: 'none', padding: '1px'}}>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                    }\r\n                    const onTitleChangeHandler = (newValue: string) => {\r\n                        props.changeTaskTitle(t.id, newValue, props.id);\r\n                    }\r\n\r\n\r\n                    return <li key={t.id}>\r\n                        {/*<input type=\"checkbox\" onChange={onChangeHandler} checked={t.isDone}/>*/}\r\n                        <Checkbox\r\n                            onChange={onChangeHandler}\r\n                            checked={t.isDone}\r\n                            size={'small'}\r\n                            color={'primary'}\r\n                        />\r\n\r\n                        <span className={t.isDone ? 'is-done' : ''}>\r\n                            <EditableSpan value={t.title} onChange={onTitleChangeHandler}/>\r\n                        </span>\r\n\r\n                        {/*<button onClick={onClickHandler}>x</button>*/}\r\n                        <IconButton\r\n                            onClick={onClickHandler}\r\n                            color={'primary'}\r\n                            size={'small'}>\r\n                            <Delete fontSize={'small'}/>\r\n                        </IconButton>\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <Button\r\n                // className={props.filter === 'all' ? 'active-filter' : ''}\r\n                color={props.filter === 'all' ? 'primary' : 'secondary'}\r\n                variant={'contained'}\r\n                size={'small'}\r\n                onClick={onAllClickHandler}>All </Button>\r\n            <Button\r\n                style={{margin: '1px'}}\r\n                // className={props.filter === 'active' ? 'active-filter' : ''}\r\n                color={props.filter === 'active' ? 'primary' : 'secondary'}\r\n                variant={'contained'}\r\n                size={'small'}\r\n                onClick={onActiveClickHandler}>Active </Button>\r\n            <Button\r\n                // className={props.filter === 'active' ? 'active-filter' : ''}\r\n                color={props.filter === 'completed' ? 'primary' : 'secondary'}\r\n                variant={'contained'}\r\n                size={'small'}\r\n                onClick={onCompletedClickHandler}>Completed </Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Toolbar, IconButton, Typography, Button, Container, Grid, Paper} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n    function removeTask(id: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\r\n        tasks[todolistId] = todolistTasks.filter(t => t.id !== id);\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\r\n        tasks[todolistId] = [task, ...todolistTasks];\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        let todolist = todolists.find(tl => tl.id === todolistId);\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function changeTaskTitle(id: string, newTitle: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.title = newTitle;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\r\n        setTodolists(todolists.filter(tl => tl.id !== id));\r\n        // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\r\n        delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeTodolistTitle(id: string, title: string) {\r\n        // найдём нужный todolist\r\n        const todolist = todolists.find(tl => tl.id === id);\r\n        if (todolist) {\r\n            // если нашёлся - изменим ему заголовок\r\n            todolist.title = title;\r\n            setTodolists([...todolists]);\r\n        }\r\n    }\r\n\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistId1, title: 'What to learn', filter: 'all'},\r\n        {id: todolistId2, title: 'What to buy', filter: 'all'}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: 'HTML&CSS', isDone: true},\r\n            {id: v1(), title: 'JS', isDone: true}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: 'Milk', isDone: true},\r\n            {id: v1(), title: 'React Book', isDone: true}\r\n        ]\r\n    });\r\n\r\n    function addTodolist(title: string) {\r\n        let newTodolistId = v1();\r\n        let newTodolist: TodolistType = {id: newTodolistId, title: title, filter: 'all'};\r\n        setTodolists([newTodolist, ...todolists]);\r\n        setTasks({\r\n            ...tasks,\r\n            [newTodolistId]: []\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar\r\n                    style={{justifyContent: 'space-between'}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button\r\n                        variant={'outlined'}\r\n                        color=\"inherit\"> Login\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container\r\n                fixed\r\n                style={{padding: '20px 0'}}>\r\n                {/*<Grid container style={{border: '1px solid red'}}>*/}\r\n                <Grid container style={{marginBottom: '20px'}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n\r\n                {/*<Grid container style={{border: '1px solid red'}}>*/}\r\n                <Grid container spacing={5}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n                            let tasksForTodolist = allTodolistTasks;\r\n\r\n                            if (tl.filter === 'active') {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\r\n                            }\r\n                            if (tl.filter === 'completed') {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\r\n                            }\r\n\r\n                            return (\r\n                                <Grid item key={tl.id}>\r\n                                    <Paper elevation={5} style={{padding: '20px'}}>\r\n                                        <Todolist\r\n                                            // key={tl.id}\r\n                                            id={tl.id}\r\n                                            title={tl.title}\r\n                                            tasks={tasksForTodolist}\r\n                                            removeTask={removeTask}\r\n                                            changeFilter={changeFilter}\r\n                                            addTask={addTask}\r\n                                            changeTaskStatus={changeStatus}\r\n                                            filter={tl.filter}\r\n                                            removeTodolist={removeTodolist}\r\n                                            changeTaskTitle={changeTaskTitle}\r\n                                            changeTodolistTitle={changeTodolistTitle}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}