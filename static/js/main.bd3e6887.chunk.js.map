{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","newTitle","trim","value","onChange","e","currentTarget","onKeyPress","charCode","style","border","onClick","color","display","EditableSpan","editMode","setEditMode","offEditMode","changeTitle","autoFocus","onBlur","key","onDoubleClick","Todolist","changeTodoListTitle","id","removeTodolist","addTask","tasks","map","t","className","isDone","type","newIsDoneValue","checked","changeTaskStatus","changeTaskTitle","removeTask","filter","changeFilter","App","todolistId1","v1","todolistId2","todolists","setTodolists","setTasks","todolistId","todolistTasks","task","changeStatus","find","todolist","tl","updatedTodoList","newTodoList","allTodolistTasks","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.bd3e6887.chunk.js","sourcesContent":["// import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n    const [title, setTitle] = useState(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    const addItem = () => {\r\n        let newTitle = title.trim();\r\n        if (newTitle !== \"\") {\r\n            props.addItem(newTitle);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   // className={error ? \"error\" : \"\"}\r\n                   style={error ? {border: '3px solid red'} : {}}\r\n            />\r\n            <button onClick={addItem}>+</button>\r\n            {/*{error && <div className=\"error-message\">{error}</div>}*/}\r\n            <div style={error ? {color: 'red'} : {display: 'none'}}>\r\n                {error}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState(props.title)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        if (title.trim()) {\r\n            props.changeTitle(title)\r\n        } else {\r\n            setTitle(props.title)\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode();\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <input\r\n                autoFocus // autoFocus={true} - это аналогичные записи\r\n                // т.е. атрибут БЕЗ параметра - по умолчанию = true\r\n                value={title}\r\n                onBlur={offEditMode}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskTitle: (id: string, title: string, todolistId: string) => void\r\n    changeTodoListTitle: (title: string, todolistId: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    // let [title, setTitle] = useState(\"\")\r\n    // let [error, setError] = useState<string | null>(null)\r\n    //\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id);\r\n    }\r\n    // const addTask = () => {\r\n    //     let newTitle = title.trim();\r\n    //     if (newTitle !== \"\") {\r\n    //         props.addTask(newTitle, props.id);\r\n    //         setTitle(\"\");\r\n    //     } else {\r\n    //         setError(\"Title is required\");\r\n    //     }\r\n    // }\r\n    //\r\n    // const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    //     setTitle(e.currentTarget.value)\r\n    // }\r\n    //\r\n    // const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    //     setError(null);\r\n    //     if (e.charCode === 13) {\r\n    //         addTask();\r\n    //     }\r\n    // }\r\n\r\n\r\n    const removeTodolist = () => props.removeTodolist(props.id)\r\n\r\n    const onAllClickHandler = () => props.changeFilter('all', props.id);\r\n    const onActiveClickHandler = () => props.changeFilter('active', props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter('completed', props.id);\r\n\r\n    const changeTodoListTitle = (title: string) => props.changeTodoListTitle(title, props.id)\r\n\r\n    return <div>\r\n        <h3>\r\n            <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n\r\n            <button onClick={removeTodolist}>x</button>\r\n        </h3>\r\n        {/*<div>*/}\r\n        {/*    <input value={title}*/}\r\n        {/*           onChange={onChangeHandler}*/}\r\n        {/*           onKeyPress={onKeyPressHandler}*/}\r\n        {/*           className={error ? \"error\" : \"\"}*/}\r\n        {/*    />*/}\r\n        {/*    <button onClick={addTask}>+</button>*/}\r\n        {/*    {error && <div className=\"error-message\">{error}</div>}*/}\r\n        {/*</div>*/}\r\n        <AddItemForm addItem={addTask}/>\r\n\r\n        <ul>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                    }\r\n\r\n                    const changeTaskTitleHandler = (title: string) => {\r\n                        props.changeTaskTitle(t.id, title, props.id)\r\n                    }\r\n\r\n                    return <li key={t.id} className={t.isDone ? 'is-done' : ''}>\r\n                        <input type=\"checkbox\" onChange={onChangeHandler} checked={t.isDone}/>\r\n                        {/*<span>{t.title}</span>*/}\r\n                        <EditableSpan title={t.title} changeTitle={changeTaskTitleHandler}/>\r\n                        <button onClick={onClickHandler}>x</button>\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <button className={props.filter === 'all' ? 'active-filter' : ''}\r\n                    onClick={onAllClickHandler}>All\r\n            </button>\r\n            <button className={props.filter === 'active' ? 'active-filter' : ''}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </button>\r\n            <button className={props.filter === 'completed' ? 'active-filter' : ''}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from './AddItemForm';\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistId1, title: 'What to learn', filter: 'all'},\r\n        {id: todolistId2, title: 'What to buy', filter: 'all'}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: 'HTML&CSS', isDone: false},\r\n            {id: v1(), title: 'JS', isDone: false}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: 'Milk', isDone: false},\r\n            {id: v1(), title: 'React Book', isDone: false}\r\n        ]\r\n    });\r\n\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\r\n        tasks[todolistId] = todolistTasks.filter(t => t.id != id);\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\r\n        tasks[todolistId] = [task, ...todolistTasks];\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        let todolist = todolists.find(tl => tl.id === todolistId);\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\r\n        setTodolists(todolists.filter(tl => tl.id != id));\r\n        // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\r\n        delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        // const newTodoListID = v1()\r\n        const newTodoList: TodolistType = {\r\n            id: v1(), // newTodoListID,\r\n            title: title,\r\n            filter: 'all'\r\n        }\r\n        setTodolists([...todolists, newTodoList])\r\n\r\n        // setTasks({...tasks, [newTodoListID]: []})\r\n        setTasks({...tasks, [newTodoList.id]: []})\r\n    }\r\n\r\n\r\n    function changeTaskTitle(id: string, title: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.title = title;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function changeTodoListTitle(title: string, todolistId: string) {\r\n        const updatedTodoList = todolists.map(tl => {\r\n            if (tl.id === todolistId) {\r\n                return {...tl, title: title}\r\n            }\r\n            return tl\r\n        })\r\n        setTodolists(updatedTodoList)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm addItem={addTodoList}/>\r\n\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id];\r\n                    let tasksForTodolist = allTodolistTasks;\r\n\r\n                    if (tl.filter === 'active') {\r\n                        tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\r\n                    }\r\n                    if (tl.filter === 'completed') {\r\n                        tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\r\n                    }\r\n\r\n                    return <Todolist\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        tasks={tasksForTodolist}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeStatus}\r\n                        filter={tl.filter}\r\n                        removeTodolist={removeTodolist}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodoListTitle={changeTodoListTitle}\r\n                    />\r\n                })\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}