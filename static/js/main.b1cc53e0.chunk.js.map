{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/TodolistsList/tasks-reducer.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","status","res","resultCode","action","type","updateTaskAC","catch","console","warn","isLoggedIn","setIsLoggedInAC","value","isInitialized","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","todolist","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","isLoggedin","auth","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","FormControl","FormLabel","href","target","handleSubmit","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","finally","setIsLoggedIn","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b1cc53e0.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'ca2d4280-c827-4a30-a630-27fd3baa0cf3'\r\n    }\r\n})\r\n\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        // const promise = instance.post<LoginParamsType, {data: ResponseType<{ userId?: number }>}>('auth/login', data);\r\n        const promise = instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>('auth/login', data);\r\n        return promise;\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<MeResponseType>>('auth/me')\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    }\r\n}\r\n\r\n\r\n// types\r\nexport type MeResponseType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n\r\n        case 'DELETE-ALL':\r\n            return {}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\nexport const deleteAllLocalDataAC = () =>\r\n    ({type: 'DELETE-ALL'} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type DeleteAllLocalDataActionType = ReturnType<typeof deleteAllLocalDataAC>\r\n\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | DeleteAllLocalDataActionType\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import {Dispatch} from 'redux'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType, todolistsAPI} from '../../api/todolists-api';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\nimport {deleteAllLocalDataAC, DeleteAllLocalDataActionType} from '../TodolistsList/tasks-reducer';\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(deleteAllLocalDataAC())\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType\r\n    | DeleteAllLocalDataActionType\r\n","import {authAPI} from '../api/todolists-api';\r\nimport {Dispatch} from 'redux';\r\nimport {setIsLoggedInAC} from '../features/Login/auth-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../utils/error-utils';\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-INITIALIZED':\r\n            return {...state, isInitialized: true}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppInitializedAC = () => ({type: 'APP/SET-INITIALIZED'} as const)\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type setAppInitializedActionType = ReturnType<typeof setAppInitializedAC>\r\n\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true));\r\n            dispatch(setAppInitializedAC())\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n        }\r\n    })\r\n        .finally(()=> {\r\n            dispatch(setAppInitializedAC())\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | setAppInitializedActionType\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {DeleteAllLocalDataActionType} from './tasks-reducer';\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n\r\n        case 'DELETE-ALL':\r\n            return []\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n    | DeleteAllLocalDataActionType\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedin = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedin) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    if (!isLoggedin) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    FormLabel,\r\n    TextField,\r\n    Button\r\n} from '@material-ui/core';\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {loginTC} from './auth-reducer';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const isLoggedin = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Minimum length 3 symbols';\r\n            }\r\n\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n// Лущенко regexp\r\n\r\n    if (isLoggedin) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <div>\r\n        {/*<Grid container justifyContent={'center'}>*/}\r\n        {/*    <Grid item justifyContent={'center'}>*/}\r\n        <FormControl>\r\n            <FormLabel>\r\n                <p>To log in get registered\r\n                    <a href={'https://social-network.samuraijs.com/'}\r\n                       target={'_blank'}> here\r\n                    </a>\r\n                </p>\r\n                <p>or use common test account credentials:</p>\r\n                <p>Email: free@samuraijs.com</p>\r\n                <p>Password: free</p>\r\n            </FormLabel>\r\n\r\n\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormGroup>\r\n                    <TextField label=\"Email\" margin=\"normal\"\r\n                        // name={'email'}\r\n                        // onChange={formik.handleChange}\r\n                        // value={formik.values.email}\r\n                        // onBlur={formik.handleBlur}\r\n                               {...formik.getFieldProps('email')}\r\n                    />\r\n                    {formik.touched.email && formik.errors.email &&\r\n                    <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n\r\n                    <TextField type=\"password\" label=\"Password\"\r\n                               margin=\"normal\"\r\n                        // name={'password'}\r\n                        // onChange={formik.handleChange}\r\n                        // value={formik.values.password}\r\n                        // onBlur={formik.handleBlur}\r\n                               {...formik.getFieldProps('password')}\r\n                    />\r\n                    {formik.touched.password && formik.errors.password &&\r\n                    <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n\r\n                    <FormControlLabel label={'Remember me'} control={<Checkbox\r\n                        // name={'rememberMe'}\r\n                        // onChange={formik.handleChange}\r\n                        {...formik.getFieldProps('rememberMe')}\r\n                        checked={formik.values.rememberMe}\r\n                    />}/>\r\n\r\n                    <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                        Login\r\n                    </Button>\r\n                </FormGroup>\r\n            </form>\r\n        </FormControl>\r\n        {/*    </Grid>*/}\r\n        {/*</Grid>*/}\r\n    </div>\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {AppBar, Button, Container, IconButton, LinearProgress, Toolbar, Typography} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport {Login} from '../features/Login/Login';\r\nimport {Route, Switch, Redirect} from 'react-router-dom'\r\nimport {logoutTC, setIsLoggedInAC} from '../features/Login/auth-reducer';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    useEffect(()=>{\r\n        dispatch(initializeAppTC())\r\n    },[])\r\n\r\n    const isInitialized = useSelector<AppRootStateType,boolean>(state => state.app.isInitialized)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const setIsLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (!isInitialized) {\r\n        return <LinearProgress/>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {setIsLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from '../features/Login/auth-reducer';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {HashRouter} from 'react-router-dom';\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}